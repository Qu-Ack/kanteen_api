// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orderitems.sql

package database

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO orderitems (order_id, item_id, takeaway_quantity, eatin_quantity, price)
VALUES ($1, $2, $3, $4, $5) RETURNING id, order_id, item_id, takeaway_quantity, eatin_quantity, price
`

type CreateOrderItemParams struct {
	OrderID          int32
	ItemID           int32
	TakeawayQuantity int32
	EatinQuantity    int32
	Price            string
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (Orderitem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.ItemID,
		arg.TakeawayQuantity,
		arg.EatinQuantity,
		arg.Price,
	)
	var i Orderitem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ItemID,
		&i.TakeawayQuantity,
		&i.EatinQuantity,
		&i.Price,
	)
	return i, err
}

const getOrderItemsForOrder = `-- name: GetOrderItemsForOrder :many
SELECT id, order_id, item_id, takeaway_quantity, eatin_quantity, price FROM orderitems where order_id=$1
`

func (q *Queries) GetOrderItemsForOrder(ctx context.Context, orderID int32) ([]Orderitem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsForOrder, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Orderitem
	for rows.Next() {
		var i Orderitem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ItemID,
			&i.TakeawayQuantity,
			&i.EatinQuantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
